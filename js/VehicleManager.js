localStorage.setItem("vehicleAdminAuthToken", JSON.stringify("eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyUm9sZSI6InZlaGljbGVBZG1pbiIsInN1YiI6InZlaGFkbWluIiwiaWF0IjoxNjk4MjMwNzUzLCJleHAiOjQ4NTE4MzA3NTN9.Cq0FEBlvx6UPMeLXTABpDaDApnpYSf5-aZx63TX-3-I"))

var packageIDs = [];
var packageNames = [];
$(document).ready(() => {

    let auth = {
        "Authorization": "Bearer " + JSON.parse(localStorage.getItem("vehicleAdminAuthToken"))
    }
    axios.get("http://localhost:8083/getAllPackageIDs", {headers: auth})
        .then((res) => {
            packageIDs = res.data;

        })
        .catch(() => {
            swal("OOPS!", "Something went wrong while fetching PIDs!", "error")
        })


    axios.get("http://localhost:8083/getPackages", {headers: auth})
        .then((res) => {
            packageNames = res.data;

        })
        .catch((error) => {
            swal("OOPS!", "Something went wrong while fetching Packages!", "error")

        })

    $(document).on("click", "#vehicleCategory", () => {
        var index = getIndex($("#vehicleCategory").val());

        $("#packageId").val(packageIDs[index]);
        console.log("Index : " + index)


    })


});

function changeTitle(title) {
    if (title === 'Home.') {
        return window.location.reload();

    }
    document.title = title;
}

$("#home").on("click", () => {
    window.location.reload();
})

$("#logout").on("click", () => {
    window.location.href = "adminLogin.html";
});
var isFormsVisible = false;

$("#guideManager").on("click", () => {


    $(".mainContent").css("display", "none");


    if (!isFormsVisible) {
        isFormsVisible = true;
        $("#vehicleTable").css("display", "none");
        isTableVisible = false;
        $("body").append("<div id='forms' class='flexContainer  marginAdder'>" + "<div class=\"mb-3\">\n" + "  <label for=\"vehicleId\" class=\"form-label\">Vehicle ID.</label>\n" + "  <input type=\"text\" class=\"form-control\" id=\"vehicleId\" placeholder=\"Generated by the server.\">\n" + "</div>\n" + "<div class=\"mb-3\">\n" + " <div class=\"mb-3\">\n" + "  <label for=\"packageId\" class=\"form-label\">Package ID.</label>\n" + "  <select class=\"form-select\" id=\"packageId\">\n" + "  </select>\n" + "</div>\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "  <label for=\"vehicleBrand\" class=\"form-label\">Vehicle Brand.</label>\n" + "  <input type=\"text\" class=\"form-control\" id=\"vehicleBrand\" placeholder=\"Mitsubishi.\">\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "<div class=\"mb-3\">\n" + "  <label for=\"vehicleCategory\" class=\"form-label\">Vehicle Category.</label>\n" + "  <select class=\"form-select\" id=\"vehicleCategory\">\n" + "  </select>\n" + "</div>\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "<div class=\"mb-3\">\n" + "  <label for=\"fuelType\" class=\"form-label\">Fuel Type.</label>\n" + "  <select class=\"form-select\" id=\"fuelType\">\n" + "    <option value=\"D/A\">D/A</option>\n" + "    <option value=\"D/M\">D/M</option>\n" + "    <option value=\"P/A\">P/A</option>\n" + "    <option value=\"P/M\">P/M</option>\n" + "  </select>\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "  <label for=\"hybridStatus\" class=\"form-label\">Is Hybrid?.</label>\n" + "  <select class=\"form-select\" id=\"hybridStatus\">\n" + "    <option value=\"true\">True</option>\n" + "    <option value=\"false\">False</option>\n" + "  </select>\n" + "</div>\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "  <label for=\"fuelUsage\" class=\"form-label\">Fuel Usage.</label>\n" + "  <input type=\"number\" class=\"form-control\" id=\"fuelUsage\" placeholder=\"\">\n" + "<label for=\"vehicleImageLocation\" class=\"form-label\">Vehicle Image Location.</label>" + "  <input type=\"file\" class=\"form-control\" id=\"vehicleImageLocation\" placeholder=\"\">\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "  <label for=\"seatCapacity\" class=\"form-label\">Seat Capacity.</label>\n" + "  <input type=\"number\" class=\"form-control\" id=\"seatCapacity\" placeholder=\"\">\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "  <label for=\"vehicleType\" class=\"form-label\">Vehicle Type.</label>\n" + "  <input type=\"text\" class=\"form-control\" id=\"vehicleType\" placeholder=\"Type of Vehicle.\">\n" + "</div>\n" + "<div class=\"mb-3\">\n" + "  <label for=\"transmissionType\" class=\"form-label\">Transmission Type.</label>\n" + "  <input type=\"text\" class=\"form-control\" id=\"transmissionType\" placeholder=\"Enter Transmission type.\">\n" + "<label for=\"driversName\" class=\"form-label\">Driver's name.</label>\n" + "  <input type=\"text\" class=\"form-control\" id=\"driversName\" placeholder=\"Enter Driver's name.\">\n" + "<div class=\"mb-3\">\n" + "  <label for=\"driversContactNumber\" class=\"form-label\">Drivers Contact Number.</label>\n" + " <input type=\"text\" class=\"form-control\" id=\"driversContactNumber\" placeholder=\"\">\n" + "<label for=\"driversLicenseImageLocation\" class=\"form-label\">Drivers License Image Location.</label>" + "  <input type=\"file\" class=\"form-control\" id=\"driversLicenseImageLocation\" placeholder=\"\">\n" + "</div>\n" + "<label for=\"remarks\" class=\"form-label\">Remarks.</label>\n" + "  <input type=\"text\" class=\"form-control\" id=\"remarks\" placeholder=\"Enter remarks here.\">\n" + "<label for=\"feeForADay\" class=\"form-label\">Vehicle Fee For A Day.</label>\n" + "  <input type=\"number\" class=\"form-control\" id=\"feeForADay\" placeholder=\"Enter Fee for day here.\">\n" + "</div>\n" + "<button type=\"button\" id='saveVehicle' class=\"btn btn-success\">Save Vehicle.</button>\n" + "<button type=\"button\" id='updateVehicle' class=\"btn btn-primary\">Update Vehicle.</button>\n" + "<button type=\"button\" id='deleteVehicle' class=\"btn btn-danger\">Delete Vehicle.</button>\n" + "<button type=\"button\" id='clearButton' class=\"btn btn-info\">Clear.</button>\n" + "</div>");

        setPackageIDs();
        setPackageNames();
        $("#vehicleId").prop("disabled", true);
        $("#packageId").prop("disabled", true);


    }


});


$(document).ready(() => {

    $(document).on("click", "#saveVehicle", () => {
        if (!validator()) {
            return swal("Operation failed!", "Please fill all the fields!", "error")


        }


        var file = $('#vehicleImageLocation')[0].files[0];
        saveImages(file);
        var file2 = $('#driversLicenseImageLocation')[0].files[0];
        saveImages(file2);


        setTimeout(() => {
            console.log('IS HYBRID : ' + $("#isHybrid").val())
            let vehicle = {
                vehicleId: $("#vehicleId").val(),
                packageId: $("#packageId").val(),
                vehicleBrand: $("#vehicleBrand").val(),
                vehicleCategory: $("#vehicleCategory").val(),
                fuelType: $("#fuelType").val(),
                hybrid: $("#hybridStatus").val(),
                fuelUsage: $("#fuelUsage").val(),
                vehicleImageLocation: imageData[0],
                seatCapacity: $("#seatCapacity").val(),
                vehicleType: $("#vehicleType").val(),
                transmissionType: $("#transmissionType").val(),
                driversName: $("#driversName").val(),
                driversContactNumber: $("#driversContactNumber").val(),
                driversLicenseImageLocation: imageData[1],
                remarks: $("#remarks").val(),
                feeForADay: $("#feeForADay").val()


            }
            console.log(vehicle)

            $.ajax({
                url: "http://localhost:8082/saveVehicle",
                method: "POST",
                headers: {
                    "content-type": "application/json",
                    "Authorization": "Bearer " + JSON.parse(localStorage.getItem("vehicleAdminAuthToken"))
                }, data: JSON.stringify(vehicle), success: (response) => {
                    if (response.statusCode === 200 || response.statusCode === 201) {
                        swal("Done!", response.message, "success")
                        return clearFields();

                    } else {
                        return swal("OOPS!", response.message, "error")

                    }


                }, error: (xhr, textStatus, errorThrown) => {
                    swal("OOPS!", "Server threw an exception : " + xhr.responseJSON.message, "error");
                },


            })

        }, 3000)


    })

});

var imageData = [];

function saveImages(file) {
    var formData = new FormData();
    formData.append('imageFile', file);
    console.log("Form data : " + formData)

    $.ajax({
        url: 'http://localhost:8090/uploadToDrive',
        type: 'POST',
        data: formData,
        async : false,
        cache: false,
        contentType: false,
        processData: false,
        success: function (data) {
            console.log("Link : "+data.data)

            imageData.push(data.data)


        }, error: (xhr, textStatus, errorThrown) => {
            swal("OOPS!", "Server threw an exception : " + xhr.responseJSON.message, "error");
        }
    });

}


function clearFields() {
    $("#vehicleId").val("");
    $("#packageId").val("");
    $("#vehicleBrand").val("");
    $("#vehicleCategory").val("");
    $("#fuelType").val("");
    $("#isHybrid").val("");
    $("#fuelUsage").val("");
    $("#vehicleImageLocation").val("");
    $("#seatCapacity").val("");
    $("#vehicleType").val("");
    $("#transmissionType").val("");
    $("#driversContactNumber").val("");
    $("#driversLicenseImageLocation").val("");
    $("#remarks").val("");
    $("#feeForADay").val("");


}

function validator() {
    if ($("#packageId").val() == '' || $("#vehicleBrand").val() === "" || $("#vehicleCategory").val() === "" || $("#fuelType").val() === "" || $("#isHybrid").val() === "" || $("#fuelUsage").val() === "" || $("#vehicleImageLocation").val() === "" || $("#seatCapacity").val() === "" || $("#vehicleType").val() === "" || $("#transmissionType").val() === "" || $("#driversContactNumber").val() === "" || $("#driversLicenseImageLocation").val() === "" || $("#remarks").val() === "") {
        return false;
    }
    return true;


}

$(document).ready(() => {


    $(document).on("click", "#clearButton", () => {
        clearFields();
    })
})
$(document).ready(() => {
    $(document).on("click", "#updateVehicle", () => {
        if (!validator()) {
            return swal("Operation failed!", "Please fill all the fields!", "error")

        }
        var file = $('#vehicleImageLocation')[0].files[0];
        saveImages(file);
        var file2 = $('#driversLicenseImageLocation')[0].files[0];
        saveImages(file2);


        setTimeout(() => {
            let vehicle = {
                vehicleId: $("#vehicleId").val(),
                packageId: $("#packageId").val(),
                vehicleBrand: $("#vehicleBrand").val(),
                vehicleCategory: $("#vehicleCategory").val(),
                fuelType: $("#fuelType").val(),
                hybrid: $("#hybridStatus").val(),
                fuelUsage: $("#fuelUsage").val(),
                vehicleImageLocation: imageData[0],
                seatCapacity: $("#seatCapacity").val(),
                vehicleType: $("#vehicleType").val(),
                transmissionType: $("#transmissionType").val(),
                driversName: $("#driversName").val(),
                driversContactNumber: $("#driversContactNumber").val(),
                driversLicenseImageLocation: imageData[1],
                remarks: $("#remarks").val(),
                feeForADay: $("#feeForADay").val()


            }

            $.ajax({
                url: "http://localhost:8082/updateVehicle",
                method: "PUT",
                headers: {
                    "content-type": "application/json",
                    "Authorization": "Bearer " + JSON.parse(localStorage.getItem("vehicleAdminAuthToken"))

                },
                data: JSON.stringify(vehicle),
                success: (response) => {
                    if (response.statusCode === 200 || response.statusCode === 201) {
                        swal("Done!", response.message, "success")
                        return clearFields();

                    } else {
                        return swal("OOPS!", response.message, "error")

                    }


                }, error: (xhr, textStatus, errorThrown) => {
                    swal("OOPS!", "Server threw an exception : " + xhr.responseJSON.message, "error");
                },


            })

        }, 3000)

    })
})
$(document).ready(() => {
    $(document).on("keydown", "#vehicleBrand", (event) => {

        if (event.key === 'Enter') {
            $.ajax({
                url: "http://localhost:8082/getVehicleByBrand?vehicleBrand=" + $("#vehicleBrand").val(),
                method: "GET",
                headers: {
                    "Authorization": "Bearer " + JSON.parse(localStorage.getItem("vehicleAdminAuthToken"))
                },
                success: (res) => {
                    console.log(res.data)
                    if (res.statusCode === 200 || res.statusCode === 201) {

                        $("#vehicleId").val(res.data.vehicleId);
                        $("#packageId").val(res.data.packageId);
                        $("#vehicleCategory").val(res.data.vehicleCategory);
                        $("#fuelType").val(res.data.fuelType);
                        $(document).ready(() => {
                            $("#hybridStatus").append("<option value='" + res.data.hybrid + "'>" + res.data.hybrid + "</option>");
                        })
                        $("#fuelUsage").val(res.data.fuelUsage);
                        $("#seatCapacity").val(res.data.seatCapacity);
                        $("#vehicleType").val(res.data.vehicleType);
                        $("#transmissionType").val(res.data.transmissionType);
                        $("#driversName").val(res.data.driversName);
                        $("#driversContactNumber").val(res.data.driversContactNumber);
                        $("#remarks").val(res.data.remarks);
                        $("#feeForADay").val(res.data.feeForADay)


                        return swal("Done!", res.message, "success");

                    }
                    swal("OOPS!", res.message, "error");

                },
                error: (xhr, textStatus, errorThrown) => {
                    swal("OOPS!", "Server threw an exception : " + xhr.responseJSON.message, "error");
                }


            });

        }


    })


});
$(document).ready(() => {
    $(document).on("click", "#deleteVehicle", () => {
        if ($("#hotelId").val() === "") {
            return swal("OOPS!", "Please enter a Vehicle name to delete!", "error");
        }

        $.ajax({
            url: "http://localhost:8082/deleteVehicle?vehicleID=" + $("#vehicleId").val(), method: "DELETE", headers: {
                "Authorization": "Bearer " + JSON.parse(localStorage.getItem("vehicleAdminAuthToken"))
            }, success: (res) => {
                console.log(res.data)
                if (res.statusCode === 200 || res.statusCode === 201) {

                    return swal("Done!", res.message, "success");

                }
                swal("OOPS!", res.message, "error");

            }, error: (xhr, textStatus, errorThrown) => {
                swal("OOPS!", "Server threw an exception : " + xhr.responseJSON.message, "error");
            }


        });


    })


});
var isTableVisible = false;


$("#tableView").on("click", () => {


    $(".mainContent").css("display", "none");

    if (!isTableVisible) {
        isTableVisible = true;
        $("#forms").css("display", "none");
        isFormsVisible = false;
        $("body").append("<table data-aos='zoom-in' id='vehicleTable' class=\"table table-dark\">\n" + "  <thead>\n" + "    <tr>\n" + "      <th scope=\"col\">Vehicle ID</th>\n" + "      <th scope=\"col\">Package ID</th>\n" + "      <th scope=\"col\">Vehicle Brand</th>\n" + "      <th scope=\"col\">Vehicle Category</th>\n" + "      <th scope=\"col\">Fuel Type</th>\n" + "      <th scope=\"col\">Is Hybrid</th>\n" + "      <th scope=\"col\">Fuel Usage</th>\n" + "      <th scope=\"col\">Vehicle Image Location</th>\n" + "      <th scope=\"col\">Seat Capacity</th>\n" + "      <th scope=\"col\">Vehicle Type</th>\n" + "      <th scope=\"col\">Transmission Type</th>\n" + "      <th scope=\"col\">Driver's Name</th>\n" + "      <th scope=\"col\">Drivers Contact Number</th>\n" + "      <th scope=\"col\">Drivers License Image Location</th>\n" + "      <th scope=\"col\">Remarks</th>\n" + "      <th scope=\"col\">Fee for a Day</th>\n" + // Added Fee for a Day column
            "    </tr>\n" + "  </thead>\n" + "  <tbody></tbody>" + "</table>");


    }
    $.ajax({
        url: "http://localhost:8082/getAll", method: "GET", headers: {
            "Authorization": "Bearer " + JSON.parse(localStorage.getItem("vehicleAdminAuthToken"))
        }, success: (res) => {
            if (!res.data) {
                return swal("OOPS!", "No data found!", "error")

            }

            res.data.map((vehicle) => {


                let row = "<tr>" + "<td>" + vehicle.vehicleId + "</td>" + "<td>" + vehicle.packageId + "</td>" + "<td>" + vehicle.vehicleBrand + "</td>" + "<td>" + vehicle.vehicleCategory + "</td>" + "<td>" + vehicle.fuelType + "</td>" + "<td>" + vehicle.hybrid + "</td>" + "<td>" + vehicle.fuelUsage + "</td>" + "<td>" + vehicle.vehicleImageLocation + "</td>" + "<td>" + vehicle.seatCapacity + "</td>" + "<td>" + vehicle.vehicleType + "</td>" + "<td>" + vehicle.transmissionType + "</td>" + "<td>" + vehicle.driversName + "</td>" + "<td>" + vehicle.driversContactNumber + "</td>" + "<td>" + vehicle.driversLicenseImageLocation + "</td>" + "<td>" + vehicle.remarks + "</td>" + "<td>" + vehicle.feeForADay + "</td>" +


                    "</tr>"
                $("#vehicleTable tbody").append(row);

            })


        }, error: (xhr, textStatus, errorThrown) => {
            swal("OOPS!", "Server threw an exception : " + xhr.responseJSON.message, "error");
        }


    })


});

function setPackageIDs() {
    packageIDs.forEach((pID) => {
        $("#packageId").append("<option value='" + pID + "'>" + pID + "</option>")
    })

}

function setPackageNames() {
    packageNames.forEach((pName) => {
        $("#vehicleCategory").append("<option value='" + pName + "'>" + pName + "</option>")


    })


}

function getIndex(packageName) {
    var i = '';

    packageNames.map((pName, index) => {
        console.log("P name : " + pName)
        if (packageName === pName) {
            i = index;

        }

    })
    return i;

}
/*Validation - Start.*/
function isValidLength(length) {
    return length >= 5;


}

function isExceedingLength(length) {
    return length > 10;
}

function isNegative(value) {
    return value < 0;

}

function isZero(value) {

    return value === 0;

}

function isValidPassword(value) {
    return value <= 8 && value >= 16;

}

function isContainingNumbers(value) {
    return /\d/.test(value)
}
function isContainingLetters(val) {
    console.log('val ',val)
    return /[a-zA-Z]/.test(val);
}
function isEmpty(value) {
    return value === "";
}

$(document).ready(()=>{

    $(document).on('mouseleave',"#vehicleBrand",()=>{
        let vb = $("#vehicleBrand").val();
        if(isEmpty(vb)){
            isInvalid('#vehicleBrand')
            return swal("OOPS!", "Vehicle Brand cannot be empty!", "error");



        }else{
            isValid('#vehicleBrand')

        }



    })
    $(document).on('mouseleave',"#fuelUsage",()=>{
        let fu = $("#fuelUsage").val();


        if(isEmpty(fu)){
            isInvalid('#fuelUsage')
            return swal("OOPS!", "Fuel Usage cannot be empty or contain letters!", "error");



        }else{
            isValid('#fuelUsage')

        }

        if(isZero(parseInt(fu))){
            isInvalid('#fuelUsage')
            return swal("OOPS!", "Fuel Usage cannot be zero!", "error");

        }else{
            isValid('#fuelUsage')
        }
        if(isNegative(fu)){
            isInvalid('#fuelUsage')
            return swal("OOPS!", "Fuel Usage cannot be negative!", "error");

        }else{
            isValid('#fuelUsage')
        }
        if(fu.length>5){
            isInvalid('#fuelUsage')
            return swal("OOPS!", "Fuel Usage cannot exceed 5 digits!", "error");

        }else{
            isValid('#fuelUsage')
        }



    })
    $(document).on('mouseleave',"#seatCapacity",()=>{
        let sc = $("#seatCapacity").val();
        if(isEmpty(sc)){
            isInvalid('#fseatCapacity')
            return swal("OOPS!", "Seat Capacity cannot be empty or contain letters!", "error");



        }else{
            isValid('#seatCapacity')

        }

        if(isZero(parseInt(sc))){
            isInvalid('#seatCapacity')
            return swal("OOPS!", "Seat Capacity cannot be zero!", "error");

        }else{
            isValid('#seatCapacity')
        }
        if(isNegative(sc)){
            isInvalid('#seatCapacity')
            return swal("OOPS!", "Seat Capacity cannot be  negative!", "error");

        }else{
            isValid('#seatCapacity')
        }
        if(sc.length>3){
            isInvalid('#seatCapacity')
            return swal("OOPS!", "Seat Capacity cannot exceed 3 digits!", "error");

        }else{
            isValid('#seatCapacity')
        }



    })
    $(document).on('mouseleave',"#vehicleType",()=>{
        let vt = $("#vehicleType").val();
        if(isEmpty(vt)){
            isInvalid('#vehicleType')
            return swal("OOPS!", "Vehicle Type cannot be empty!", "error");



        }else{
            isValid('#vehicleType')

        }

        if(isZero(parseInt(vt))){
            isInvalid('#vehicleType')
            return swal("OOPS!", "Vehicle Type cannot be zero!", "error");

        }else{
            isValid('#vehicleType')
        }
        if(isNegative(vt)){
            isInvalid('#vehicleType')
            return swal("OOPS!", "Vehicle Type cannot be  negative!", "error");

        }else{
            isValid('#vehicleType')
        }
        if(isContainingNumbers(parseInt(vt))){
            isInvalid('#vehicleType')
            return swal("OOPS!", "Vehicle Type cannot contain numbers!", "error");

        }else{
            isValid('#vehicleType')
        }



    })
    $(document).on('mouseleave',"#transmissionType",()=>{
        let tt = $("#transmissionType").val();
        if(isEmpty(tt)){
            isInvalid('#transmissonType')
            return swal("OOPS!", "Transmission Type cannot be empty!", "error");



        }else{
            isValid('#transmissionType')

        }

        if(isZero(parseInt(tt))){
            isInvalid('#transmissionType')
            return swal("OOPS!", "Transmission Type cannot be zero!", "error");

        }else{
            isValid('#transmissionType')
        }
        if(isNegative(tt)){
            isInvalid('#transmissionType')
            return swal("OOPS!", "Transmission Type cannot be  negative!", "error");

        }else{
            isValid('#transmissionType')
        }
        if(isContainingNumbers(parseInt(tt))){
            isInvalid('#transmissionType')
            return swal("OOPS!", "Transmission Type cannot contain numbers!", "error");

        }else{
            isValid('#transmissionType')
        }



    })
    $(document).on('mouseleave',"#driversName",()=>{
        let dn = $("#driversName").val();
        if(isEmpty(dn)){
            isInvalid('#driversName')
            return swal("OOPS!", "Drivers Name cannot be empty!", "error");



        }else{
            isValid('#driversName')

        }

        if(isZero(parseInt(dn))){
            isInvalid('#driversName')
            return swal("OOPS!", "Drivers Name cannot be zero!", "error");

        }else{
            isValid('#driversName')
        }
        if(isNegative(dn)){
            isInvalid('#driversName')
            return swal("OOPS!", "Drivers Name cannot be  negative!", "error");

        }else{
            isValid('#driversName')
        }
        if(isContainingNumbers(parseInt(dn))){
            isInvalid('#driversName')
            return swal("OOPS!", "Drivers Name cannot contain numbers!", "error");

        }else{
            isValid('#driversName')
        }



    })
    $(document).on('mouseleave',"#driversContactNumber",()=>{
        let dcn = $("#driversContactNumber").val();
        if(isEmpty(dcn)){
            isInvalid('#driversContactNumber')
            return swal("OOPS!", "Drivers Contact number cannot be empty or Contain numbers!", "error");



        }else{
            isValid('#driversContactNumber')

        }

        if(isZero(parseInt(dcn))){
            isInvalid('#driversContactNumber')
            return swal("OOPS!", "Drivers Contact number cannot be zero!", "error");

        }else{
            isValid('#driversContactNumber')
        }
        if(isNegative(dcn)){
            isInvalid('#driversContactNumber')
            return swal("OOPS!", "Drivers Contact Number cannot be  negative!", "error");

        }else{
            isValid('#driversContactNumber')
        }
        if(isContainingLetters(parseInt(dcn))){
            isInvalid('#driversContactNumber')
            return swal("OOPS!", "Drivers Contact Number contain letters!", "error");

        }else{
            isValid('#driversContactNumber')
        }

        if(dcn.length > 10){
            isInvalid('#driversContactNumber')
            return swal("OOPS!", "Drivers Contact Number cannot exceed 10 digits!", "error");

        }else{
            isValid('#driversContactNumber')
        }




    })
    $(document).on('mouseleave',"#remarks",()=>{
        let remarks = $("#remarks").val();
        if(isEmpty(remarks)){
            isInvalid('#remarks')
            return swal("OOPS!", "Remarks cannot be empty!", "error");



        }else{
            isValid('#remarks')

        }

        if(isZero(parseInt(remarks))){
            isInvalid('#remarks')
            return swal("OOPS!", "Remarks cannot be zero!", "error");

        }else{
            isValid('#remarks')
        }
        if(isNegative(remarks)){
            isInvalid('#remarks')
            return swal("OOPS!", "Remarks cannot be  negative!", "error");

        }else{
            isValid('#remarks')
        }
        if(isContainingNumbers(parseInt(remarks))){
            isInvalid('#remarks')
            return swal("OOPS!", "Remarks cannot contain numbers!", "error");

        }else{
            isValid('#remarks')
        }



    })
    $(document).on('mouseleave',"#feeForADay",()=>{
        let ffad = $("#feeForADay").val();
        if(isEmpty(ffad)){
            isInvalid('#feeForADay')
            return swal("OOPS!", "Fee for a day cannot be empty or Contain letters!", "error");



        }else{
            isValid('#feeForADay')

        }

        if(isZero(parseInt(ffad))){
            isInvalid('#feeForADay')
            return swal("OOPS!", "Fee for a day cannot be zero!", "error");

        }else{
            isValid('#feeForADay')
        }
        if(isNegative(ffad)){
            isInvalid('#feeForADay')
            return swal("OOPS!", "Fee for a day cannot be  negative!", "error");

        }else{
            isValid('#feeForADay')
        }
        if(isContainingLetters(parseInt(ffad))){
            isInvalid('#feeForADay')
            return swal("OOPS!", "Fee for a day cannot contain letters!", "error");

        }else{
            isValid('#feeForADay')
        }

        if(ffad.length > 5){
            isInvalid('#feeForADay')
            return swal("OOPS!", "Fee for a day cannot exceed 5 digits!", "error");

        }else{
            isValid('#feeForADay')
        }




    })


})

function isValid(id) {
    $(id).css("border", "2px solid green");
    $(id).css("color", "green");

}

function isInvalid(id) {
    $(id).val('');
    $(id).css("border", "2px solid red");
    $(id).css("color", "red");
}

/*Validation - End.*/